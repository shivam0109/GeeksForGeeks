Important for Binary Trees : Use recursive call on left subtree and right subtree. 

fun(root)-> fun(root.left), fun(root.right) 
Most of the questions are solved by using 
---> fun(root.left) + fun(root.right) 
---> max(fun(root.left),fun(root.right)) 

when we have to satisfy conditions a,b and c in recursion, do 
---> return fun(a_true_flag && b_true_flag && c_true_flag) 

To find number of edges between root and a given key, just find the height of given key. 


1. bfs for tree (recursive and iterative) 
2. Threaded tree
3. Inorder tree traversal without recursion. (Using stack) 
4. Diameter of a tree : Can be through root or not through root. If through root height(root.left) + height(root.right) + 1,
   else max(diameter(root.left),diamter(root.right))
5. Print all root to leaf paths one per line. 
6. If two trees are identical. 
7. Check if a tree is height balanced. 1 O(n2) solution and 2 O(n) solutions. 
8. Find max width O(n) time O(n) space using queue. 
9. Print Ancestors of a given node. 
10. Build tree from given Inorder and Preorder traversals. 
11. Find all possible interpretations of array of digits. 
12. Find if a tree is foldable.
13. Check if a tree is a sumtree in O(n) and constant space.
    root.data = sum(all elements in left subtree) + sum(elements in right subtree) 
14. Connect nodes at same level using O(1) space iterative and recursive. 
15. Check if a tree is complete or not - Iterative 
16. Construct a special tree from preorder traversal. The tree has 0/2 children. Also another array of Nodes/Leaves is given. 
17. Vertical sum in a tree. 
18. Convert an arbitrary tree to a tree that holds children sum property. 
19. Convert an arbitrary tree to a tree to its sum tree. 
20. Binary Tree to Doubly Linked List and Circular Doubly Linked List in Inorder, Preorder and Postorder traversals.  
21. Lowest Common Ancestor. 
22. Distance b/w two keys. 
23. Print all nodes which are at a distance of k from given node. 
24. Find closest leaf in a binary tree. 
25. Remove all nodes that dont lie in any path with sum>=k 
26. Reverse alternate levels of a perfect tree. 

#TO-DO
1. Custom Tree Problem.
2. All tree to linked list. 
3. 

-----------------------------------------
|Character input -> scr.next().charAt(0)|
|Take Input of Tree                     | 
-----------------------------------------


